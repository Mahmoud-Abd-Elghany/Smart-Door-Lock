
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00000b02  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000e8  008000e8  00000c1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001258  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097c  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a44  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087f  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000913  00000000  00000000  00003e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004782  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__vector_11>
  30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_12>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_13>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	81 01       	movw	r16, r2
  56:	83 01       	movw	r16, r6
  58:	85 01       	movw	r16, r10
  5a:	87 01       	movw	r16, r14
  5c:	89 01       	movw	r16, r18
  5e:	8b 01       	movw	r16, r22
  60:	8d 01       	movw	r16, r26

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d4 e0       	ldi	r29, 0x04	; 4
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e2 e0       	ldi	r30, 0x02	; 2
  76:	fb e0       	ldi	r31, 0x0B	; 11
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a8 3e       	cpi	r26, 0xE8	; 232
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a8 ee       	ldi	r26, 0xE8	; 232
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a9 3e       	cpi	r26, 0xE9	; 233
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 46 03 	call	0x68c	; 0x68c <main>
  98:	0c 94 7f 05 	jmp	0xafe	; 0xafe <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <__vector_11>:
								.OperationMode= USART_Async_DoubleSpeed,
								.RxComp_Interrupt_CallBack = NULL_PTR,
								.TxComp_Interrupt_CallBack = NULL_PTR,
								.UDREmpty_Interrupt_CallBack = NULL_PTR};
	
ISR(USART_RXC_vect){
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	if(USART_config_0.RxComp_Interrupt_CallBack != NULL_PTR)
  c2:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
  c6:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
  ca:	30 97       	sbiw	r30, 0x00	; 0
  cc:	09 f0       	breq	.+2      	; 0xd0 <__vector_11+0x30>
	{
		USART_config_0.RxComp_Interrupt_CallBack();
  ce:	09 95       	icall
	}
	else{
		//Handling Error Function
	}
}
  d0:	ff 91       	pop	r31
  d2:	ef 91       	pop	r30
  d4:	bf 91       	pop	r27
  d6:	af 91       	pop	r26
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	7f 91       	pop	r23
  de:	6f 91       	pop	r22
  e0:	5f 91       	pop	r21
  e2:	4f 91       	pop	r20
  e4:	3f 91       	pop	r19
  e6:	2f 91       	pop	r18
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_13>:

ISR(USART_TXC_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	if(USART_config_0.TxComp_Interrupt_CallBack != NULL_PTR)
 114:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
 118:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
 11c:	30 97       	sbiw	r30, 0x00	; 0
 11e:	09 f0       	breq	.+2      	; 0x122 <__vector_13+0x30>
	{
		USART_config_0.TxComp_Interrupt_CallBack();
 120:	09 95       	icall
	}
	else{
		//Handling Error Function
	}
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <__vector_12>:

ISR(USART_UDRE_vect){
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	if(USART_config_0.UDREmpty_Interrupt_CallBack != NULL_PTR)
 166:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
 16a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
 16e:	30 97       	sbiw	r30, 0x00	; 0
 170:	09 f0       	breq	.+2      	; 0x174 <__vector_12+0x30>
	{
		USART_config_0.UDREmpty_Interrupt_CallBack();
 172:	09 95       	icall
	}
	else{
		//Handling Error Function
	}
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <USART_init>:

void USART_init(void){
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
	char UCSRA_temp = 0;
	char UCSRB_temp = 0;
	char UCSRC_temp = 0;
	float BaudRate = 0; //Value to be put in UBRR register
	
	switch (USART_config_0.EnableMode)
 1a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	51 f0       	breq	.+20     	; 0x1c2 <USART_init+0x2c>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	31 f0       	breq	.+12     	; 0x1be <USART_init+0x28>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	11 f0       	breq	.+4      	; 0x1ba <USART_init+0x24>
	}
}

void USART_init(void){
	char UCSRA_temp = 0;
	char UCSRB_temp = 0;
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <USART_init+0x2e>
		break;
		case USART_Rx_Enable:
			UCSRB_temp |= (1<<RXEN); //Rx Pin enable
		break;
		case USART_Tx_Enable:
			UCSRB_temp |= (1<<TXEN); //Tx Pin enable
 1ba:	d8 e0       	ldi	r29, 0x08	; 8
		break;
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <USART_init+0x2e>
		case USART_Tx_Rx_Enable:
			UCSRB_temp = UCSRB_temp | (1<<TXEN) | (1<<RXEN);
 1be:	d8 e1       	ldi	r29, 0x18	; 24
		break;
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <USART_init+0x2e>
	switch (USART_config_0.EnableMode)
	{
		case USART_Disable:
		break;
		case USART_Rx_Enable:
			UCSRB_temp |= (1<<RXEN); //Rx Pin enable
 1c2:	d0 e1       	ldi	r29, 0x10	; 16
		break;
		default:
		break;
	}
	
	switch (USART_config_0.OperationMode)
 1c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	71 f1       	breq	.+92     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 1cc:	20 f0       	brcs	.+8      	; 0x1d6 <USART_init+0x40>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <USART_init+0x3e>
 1d2:	53 c0       	rjmp	.+166    	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
 1d4:	7c c0       	rjmp	.+248    	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
	{
		case USART_Async_NormalSpeed:
			BaudRate = ((float)F_CPU/(16.0*(USART_config_0.BaudRate)))-1 + 0.5; //(float)/(float) to get float Output
 1d6:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 1da:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 1de:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 1e2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
 1e6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatunsisf>
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	40 e8       	ldi	r20, 0x80	; 128
 1f0:	51 e4       	ldi	r21, 0x41	; 65
 1f2:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	74 e2       	ldi	r23, 0x24	; 36
 1fe:	84 e7       	ldi	r24, 0x74	; 116
 200:	99 e4       	ldi	r25, 0x49	; 73
 202:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__divsf3>
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e8       	ldi	r20, 0x80	; 128
 20c:	5f e3       	ldi	r21, 0x3F	; 63
 20e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__subsf3>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	5f e3       	ldi	r21, 0x3F	; 63
 21a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__addsf3>
 21e:	6b 01       	movw	r12, r22
 220:	7c 01       	movw	r14, r24
}

void USART_init(void){
	char UCSRA_temp = 0;
	char UCSRB_temp = 0;
	char UCSRC_temp = 0;
 222:	c0 e0       	ldi	r28, 0x00	; 0
		//Handling Error Function
	}
}

void USART_init(void){
	char UCSRA_temp = 0;
 224:	10 e0       	ldi	r17, 0x00	; 0
	
	switch (USART_config_0.OperationMode)
	{
		case USART_Async_NormalSpeed:
			BaudRate = ((float)F_CPU/(16.0*(USART_config_0.BaudRate)))-1 + 0.5; //(float)/(float) to get float Output
		break;
 226:	5b c0       	rjmp	.+182    	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
		case USART_Async_DoubleSpeed:
			UCSRA_temp |= (1<<U2X);
			BaudRate = (((float)F_CPU)/(8.0*(USART_config_0.BaudRate)))-1 + 0.5; // +0.5 to get approx. value when masked to non float
 228:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 22c:	70 91 6f 00 	lds	r23, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
 230:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 234:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
 238:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatunsisf>
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	51 e4       	ldi	r21, 0x41	; 65
 244:	0e 94 0c 05 	call	0xa18	; 0xa18 <__mulsf3>
 248:	9b 01       	movw	r18, r22
 24a:	ac 01       	movw	r20, r24
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	74 e2       	ldi	r23, 0x24	; 36
 250:	84 e7       	ldi	r24, 0x74	; 116
 252:	99 e4       	ldi	r25, 0x49	; 73
 254:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__divsf3>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	40 e8       	ldi	r20, 0x80	; 128
 25e:	5f e3       	ldi	r21, 0x3F	; 63
 260:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__subsf3>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	5f e3       	ldi	r21, 0x3F	; 63
 26c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__addsf3>
 270:	6b 01       	movw	r12, r22
 272:	7c 01       	movw	r14, r24
}

void USART_init(void){
	char UCSRA_temp = 0;
	char UCSRB_temp = 0;
	char UCSRC_temp = 0;
 274:	c0 e0       	ldi	r28, 0x00	; 0
	{
		case USART_Async_NormalSpeed:
			BaudRate = ((float)F_CPU/(16.0*(USART_config_0.BaudRate)))-1 + 0.5; //(float)/(float) to get float Output
		break;
		case USART_Async_DoubleSpeed:
			UCSRA_temp |= (1<<U2X);
 276:	12 e0       	ldi	r17, 0x02	; 2
			BaudRate = (((float)F_CPU)/(8.0*(USART_config_0.BaudRate)))-1 + 0.5; // +0.5 to get approx. value when masked to non float
		break;
 278:	32 c0       	rjmp	.+100    	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
		case USART_Sync:
			UCSRC_temp |= (1<<UMSEL);
			BaudRate = ((float)F_CPU/(2.0*(USART_config_0.BaudRate)))-1 + 0.5;
 27a:	00 e6       	ldi	r16, 0x60	; 96
 27c:	10 e0       	ldi	r17, 0x00	; 0
 27e:	f8 01       	movw	r30, r16
 280:	66 85       	ldd	r22, Z+14	; 0x0e
 282:	77 85       	ldd	r23, Z+15	; 0x0f
 284:	80 89       	ldd	r24, Z+16	; 0x10
 286:	91 89       	ldd	r25, Z+17	; 0x11
 288:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__floatunsisf>
 28c:	9b 01       	movw	r18, r22
 28e:	ac 01       	movw	r20, r24
 290:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__addsf3>
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	74 e2       	ldi	r23, 0x24	; 36
 29c:	84 e7       	ldi	r24, 0x74	; 116
 29e:	99 e4       	ldi	r25, 0x49	; 73
 2a0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__divsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	40 e8       	ldi	r20, 0x80	; 128
 2aa:	5f e3       	ldi	r21, 0x3F	; 63
 2ac:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__subsf3>
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	5f e3       	ldi	r21, 0x3F	; 63
 2b8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__addsf3>
 2bc:	6b 01       	movw	r12, r22
 2be:	7c 01       	movw	r14, r24
			
			switch(USART_config_0.ClockPolarity)
 2c0:	f8 01       	movw	r30, r16
 2c2:	86 81       	ldd	r24, Z+6	; 0x06
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	49 f0       	breq	.+18     	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
		case USART_Async_DoubleSpeed:
			UCSRA_temp |= (1<<U2X);
			BaudRate = (((float)F_CPU)/(8.0*(USART_config_0.BaudRate)))-1 + 0.5; // +0.5 to get approx. value when masked to non float
		break;
		case USART_Sync:
			UCSRC_temp |= (1<<UMSEL);
 2c8:	c0 e4       	ldi	r28, 0x40	; 64
		//Handling Error Function
	}
}

void USART_init(void){
	char UCSRA_temp = 0;
 2ca:	10 e0       	ldi	r17, 0x00	; 0
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
	char UCSRB_temp = 0;
	char UCSRC_temp = 0;
	float BaudRate = 0; //Value to be put in UBRR register
 2ce:	c1 2c       	mov	r12, r1
 2d0:	d1 2c       	mov	r13, r1
 2d2:	76 01       	movw	r14, r12
}

void USART_init(void){
	char UCSRA_temp = 0;
	char UCSRB_temp = 0;
	char UCSRC_temp = 0;
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
		//Handling Error Function
	}
}

void USART_init(void){
	char UCSRA_temp = 0;
 2d6:	10 e0       	ldi	r17, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
			switch(USART_config_0.ClockPolarity)
			{
				case USART_Sample_Falling:
				break;
				case USART_Sample_Rising:
					UCSRC_temp |= (1<<UCPOL);
 2da:	c1 e4       	ldi	r28, 0x41	; 65
		//Handling Error Function
	}
}

void USART_init(void){
	char UCSRA_temp = 0;
 2dc:	10 e0       	ldi	r17, 0x00	; 0
		break;
		default:
		break;
	}
	
	switch (USART_config_0.CommunicationMode)
 2de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
	{
		case USART_SingleProcessor:
		break;
		case USART_MultiProcessor:
			UCSRA_temp |= (1<<MPCM);
 2e6:	11 60       	ori	r17, 0x01	; 1
		break;
	}
	
	switch(USART_config_0.InterruptEnable)
 2e8:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2ec:	8e 2f       	mov	r24, r30
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	31 97       	sbiw	r30, 0x01	; 1
 2f4:	e7 30       	cpi	r30, 0x07	; 7
 2f6:	f1 05       	cpc	r31, r1
 2f8:	88 f4       	brcc	.+34     	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
 2fa:	e6 5d       	subi	r30, 0xD6	; 214
 2fc:	ff 4f       	sbci	r31, 0xFF	; 255
 2fe:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__tablejump2__>
	{
		case USART_Interrupt_Disable:
		break;
		case USART_RxComp_Enable:
			UCSRB_temp |= (1<<RXCIE);
 302:	d0 68       	ori	r29, 0x80	; 128
		break;
 304:	0b c0       	rjmp	.+22     	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
		case USART_TxComp_Enable:
			UCSRB_temp |= (1<<TXCIE);
 306:	d0 64       	ori	r29, 0x40	; 64
		break;
 308:	09 c0       	rjmp	.+18     	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
		case USART_UDREmpty_Enable:
			UCSRB_temp |= (1<<UDRIE);
 30a:	d0 62       	ori	r29, 0x20	; 32
		break;
 30c:	07 c0       	rjmp	.+14     	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
		case USART_RxComp_TxComp_Enable:
			UCSRB_temp |= (1<<RXCIE) | (1<<TXCIE);
 30e:	d0 6c       	ori	r29, 0xC0	; 192
		break;
 310:	05 c0       	rjmp	.+10     	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
		case USART_RxComp_UDREmpty_Enable:
			UCSRB_temp |= (1<<RXCIE) | (1<<UDRIE);
 312:	d0 6a       	ori	r29, 0xA0	; 160
		break;
 314:	03 c0       	rjmp	.+6      	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
		case USART_TxComp_UDREmpty_Enable:
			UCSRB_temp |= (1<<TXCIE) | (1<<UDRIE);
 316:	d0 66       	ori	r29, 0x60	; 96
		break;
 318:	01 c0       	rjmp	.+2      	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
		case USART_RxComp_TxComp_UDREmpty_Enable:
			UCSRB_temp |= (1<<RXCIE) | (1<<TXCIE) | (1<<UDRIE);
 31a:	d0 6e       	ori	r29, 0xE0	; 224
		break;
		default:
		break;
	}
	
	switch (USART_config_0.DataFrame)
 31c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	59 f0       	breq	.+22     	; 0x33a <__EEPROM_REGION_LENGTH__+0x13a>
 324:	18 f4       	brcc	.+6      	; 0x32c <__EEPROM_REGION_LENGTH__+0x12c>
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	31 f0       	breq	.+12     	; 0x336 <__EEPROM_REGION_LENGTH__+0x136>
 32a:	0d c0       	rjmp	.+26     	; 0x346 <__EEPROM_REGION_LENGTH__+0x146>
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	39 f0       	breq	.+14     	; 0x33e <__EEPROM_REGION_LENGTH__+0x13e>
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	39 f0       	breq	.+14     	; 0x342 <__EEPROM_REGION_LENGTH__+0x142>
 334:	08 c0       	rjmp	.+16     	; 0x346 <__EEPROM_REGION_LENGTH__+0x146>
	{
		case USART_5bit:
		break;
		case USART_6bit:
			UCSRC_temp |= (1<<UCSZ0); 
 336:	c2 60       	ori	r28, 0x02	; 2
		break;
 338:	06 c0       	rjmp	.+12     	; 0x346 <__EEPROM_REGION_LENGTH__+0x146>
		case USART_7bit:
			UCSRC_temp |= (1<<UCSZ1); 
 33a:	c4 60       	ori	r28, 0x04	; 4
		break;
 33c:	04 c0       	rjmp	.+8      	; 0x346 <__EEPROM_REGION_LENGTH__+0x146>
		case USART_8bit:
			UCSRC_temp |= (1<<UCSZ0) | (1<<UCSZ1); 
 33e:	c6 60       	ori	r28, 0x06	; 6
		break;
 340:	02 c0       	rjmp	.+4      	; 0x346 <__EEPROM_REGION_LENGTH__+0x146>
		case USART_9bit:
			UCSRB_temp |= (1<<UCSZ2);
 342:	d4 60       	ori	r29, 0x04	; 4
			UCSRC_temp |= (1<<UCSZ0) | (1<<UCSZ1);
 344:	c6 60       	ori	r28, 0x06	; 6
		break;
		default:
		break;
	}
	
	switch(USART_config_0.CheckFrame)
 346:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	79 f0       	breq	.+30     	; 0x36c <__EEPROM_REGION_LENGTH__+0x16c>
 34e:	28 f4       	brcc	.+10     	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	41 f0       	breq	.+16     	; 0x364 <__EEPROM_REGION_LENGTH__+0x164>
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	41 f0       	breq	.+16     	; 0x368 <__EEPROM_REGION_LENGTH__+0x168>
 358:	0e c0       	rjmp	.+28     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
 35a:	84 30       	cpi	r24, 0x04	; 4
 35c:	49 f0       	breq	.+18     	; 0x370 <__EEPROM_REGION_LENGTH__+0x170>
 35e:	85 30       	cpi	r24, 0x05	; 5
 360:	49 f0       	breq	.+18     	; 0x374 <__EEPROM_REGION_LENGTH__+0x174>
 362:	09 c0       	rjmp	.+18     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
	{
		case USART_ParityDisable_1Stopbit:
		break;
		case USART_ParityDisable_2StopBit:
			UCSRC_temp |= (1<<USBS);
 364:	c8 60       	ori	r28, 0x08	; 8
		break;
 366:	07 c0       	rjmp	.+14     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		case USART_ParityEven_1StopBit:
			UCSRC_temp |= (1<<UPM1);
 368:	c0 62       	ori	r28, 0x20	; 32
		break;
 36a:	05 c0       	rjmp	.+10     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		case USART_ParityEven_2StopBit:
			UCSRC_temp |= (1<<USBS) | (1<<UPM1);
 36c:	c8 62       	ori	r28, 0x28	; 40
		break;
 36e:	03 c0       	rjmp	.+6      	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		case USART_ParityOdd_1StopBit:
			UCSRC_temp |= (1<<UPM0) | (1<<UPM1);
 370:	c0 63       	ori	r28, 0x30	; 48
		break;
 372:	01 c0       	rjmp	.+2      	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
		case USART_ParityOdd_2StopBit:
			UCSRC_temp |= (1<<USBS) | (1<<UPM0) | (1<<UPM1);
 374:	c8 63       	ori	r28, 0x38	; 56
		break;
		default:
		break;	
	}
	
	UBRRH = ((unsigned short)BaudRate) >> 8;
 376:	c7 01       	movw	r24, r14
 378:	b6 01       	movw	r22, r12
 37a:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixunssfsi>
 37e:	70 bd       	out	0x20, r23	; 32
	UBRRL = ((unsigned char)BaudRate);
 380:	c7 01       	movw	r24, r14
 382:	b6 01       	movw	r22, r12
 384:	0e 94 4f 04 	call	0x89e	; 0x89e <__fixunssfsi>
 388:	69 b9       	out	0x09, r22	; 9
	UCSRA = UCSRA_temp;
 38a:	1b b9       	out	0x0b, r17	; 11
	UCSRC_temp |= (1<<URSEL); //Accessing UCSRC
 38c:	c0 68       	ori	r28, 0x80	; 128
	UCSRC = UCSRC_temp;
 38e:	c0 bd       	out	0x20, r28	; 32
	UCSRB = UCSRB_temp;
 390:	da b9       	out	0x0a, r29	; 10
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	ff 90       	pop	r15
 39c:	ef 90       	pop	r14
 39e:	df 90       	pop	r13
 3a0:	cf 90       	pop	r12
 3a2:	08 95       	ret

000003a4 <USART_sendByte_Polling>:

void USART_sendByte_Polling(unsigned short byte){
	while((UCSRA & (1<<UDRE)) == 0 ){} // Polling until UDR is empty
 3a4:	5d 9b       	sbis	0x0b, 5	; 11
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <USART_sendByte_Polling>
	if(USART_config_0.DataFrame == USART_9bit){
 3a8:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 3ac:	24 30       	cpi	r18, 0x04	; 4
 3ae:	31 f4       	brne	.+12     	; 0x3bc <USART_sendByte_Polling+0x18>
		UCSRB &= (~(0x01)); //Clearing 9th bit
 3b0:	2a b1       	in	r18, 0x0a	; 10
 3b2:	2e 7f       	andi	r18, 0xFE	; 254
 3b4:	2a b9       	out	0x0a, r18	; 10
		UCSRB |= ( (byte>>8) <<TXB8); // adding 9th bit 
 3b6:	2a b1       	in	r18, 0x0a	; 10
 3b8:	92 2b       	or	r25, r18
 3ba:	9a b9       	out	0x0a, r25	; 10
	}
	UDR = (unsigned char) byte;
 3bc:	8c b9       	out	0x0c, r24	; 12
 3be:	08 95       	ret

000003c0 <USART_recieveByte_Polling>:
	
}

unsigned short USART_recieveByte_Polling(void){
	while((UCSRA & (1<<RXC)) == 0){} //Polling until there is unread data
 3c0:	5f 9b       	sbis	0x0b, 7	; 11
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <USART_recieveByte_Polling>
	unsigned short Data = 0;
	/* Error Checking */
	if((UCSRA & ((1<<FE) | (1<<DOR) | (1<<PE))) == 1)
 3c4:	8b b1       	in	r24, 0x0b	; 11
		else{
			USART_config_0.ErrorType = USART_Parity_Error;
		}
	}
	
	if(USART_config_0.DataFrame == USART_9bit)
 3c6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 3ca:	84 30       	cpi	r24, 0x04	; 4
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <USART_recieveByte_Polling+0x16>
	{
		Data |= (RXB8 << 8) | UDR;
 3ce:	8c b1       	in	r24, 0x0c	; 12
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	91 60       	ori	r25, 0x01	; 1
 3d4:	08 95       	ret
	}
	else{
		Data = UDR;
 3d6:	8c b1       	in	r24, 0x0c	; 12
 3d8:	90 e0       	ldi	r25, 0x00	; 0
	}
	return Data;
}
 3da:	08 95       	ret

000003dc <Keypad_buttonNumber_4x3>:

/*Special Characters returned as ASCII Code*/
/* Used for Phone-like keypad */
/*This function returns equivalent no. to the pressed button */
static unsigned char Keypad_buttonNumber_4x3(unsigned char No){
	switch(No){
 3dc:	8b 30       	cpi	r24, 0x0B	; 11
 3de:	41 f0       	breq	.+16     	; 0x3f0 <Keypad_buttonNumber_4x3+0x14>
 3e0:	8c 30       	cpi	r24, 0x0C	; 12
 3e2:	21 f0       	breq	.+8      	; 0x3ec <Keypad_buttonNumber_4x3+0x10>
 3e4:	8a 30       	cpi	r24, 0x0A	; 10
 3e6:	29 f4       	brne	.+10     	; 0x3f2 <Keypad_buttonNumber_4x3+0x16>
		case 10:
			return '*';
 3e8:	8a e2       	ldi	r24, 0x2A	; 42
 3ea:	08 95       	ret
		break;
		case 11:
			return 0;
		break;
		case 12:
			return '#';
 3ec:	83 e2       	ldi	r24, 0x23	; 35
 3ee:	08 95       	ret
	switch(No){
		case 10:
			return '*';
		break;
		case 11:
			return 0;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
			return No; 
		break;
	}
}
 3f2:	08 95       	ret

000003f4 <Keypad_Pressed_Key>:
unsigned char Keypad_Pressed_Key(void){
	/* Lowest significant 4 pins : Row(Input) pins
	 * Highest significant 3 or 4 pins : Column(Float) pins */
	unsigned char col,row;
	while(1){
		for( col= 0; col < KEYPAD_COLUMNS; col++){
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	23 c0       	rjmp	.+70     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
			KEY_PORT_DIR = (0x10<<col);
 3f8:	20 e1       	ldi	r18, 0x10	; 16
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	08 2e       	mov	r0, r24
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	0a 94       	dec	r0
 406:	e2 f7       	brpl	.-8      	; 0x400 <__DATA_REGION_LENGTH__>
 408:	2a bb       	out	0x1a, r18	; 26
			KEY_PORT_OUT = (~(0x10<<col));
 40a:	20 95       	com	r18
 40c:	2b bb       	out	0x1b, r18	; 27
		
			for(row = 0; row < KEYPAD_ROWS; row++){
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	13 c0       	rjmp	.+38     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
				if(!(KEY_PORT_IN & (1<< row))){ // checking if bit is low
 412:	29 b3       	in	r18, 0x19	; 25
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	09 2e       	mov	r0, r25
 418:	02 c0       	rjmp	.+4      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 41a:	35 95       	asr	r19
 41c:	27 95       	ror	r18
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 422:	20 fd       	sbrc	r18, 0
 424:	08 c0       	rjmp	.+16     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
					unsigned char Button_No = ((row*KEYPAD_COLUMNS)+col+1);
 426:	29 2f       	mov	r18, r25
 428:	22 0f       	add	r18, r18
 42a:	92 0f       	add	r25, r18
 42c:	89 0f       	add	r24, r25
					#if (KEYPAD_COLUMNS == 3)
					return Keypad_buttonNumber_4x3(Button_No);
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Keypad_buttonNumber_4x3>
 434:	08 95       	ret
	while(1){
		for( col= 0; col < KEYPAD_COLUMNS; col++){
			KEY_PORT_DIR = (0x10<<col);
			KEY_PORT_OUT = (~(0x10<<col));
		
			for(row = 0; row < KEYPAD_ROWS; row++){
 436:	9f 5f       	subi	r25, 0xFF	; 255
 438:	94 30       	cpi	r25, 0x04	; 4
 43a:	58 f3       	brcs	.-42     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
unsigned char Keypad_Pressed_Key(void){
	/* Lowest significant 4 pins : Row(Input) pins
	 * Highest significant 3 or 4 pins : Column(Float) pins */
	unsigned char col,row;
	while(1){
		for( col= 0; col < KEYPAD_COLUMNS; col++){
 43c:	8f 5f       	subi	r24, 0xFF	; 255
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	d8 f2       	brcs	.-74     	; 0x3f8 <Keypad_Pressed_Key+0x4>
 442:	d8 cf       	rjmp	.-80     	; 0x3f4 <Keypad_Pressed_Key>

00000444 <LCD_Send_Command>:
	LCD_Send_Command(LCD_DISPLAY_ON_CURSOR_ON);
	LCD_Send_Command(LCD_CLEAR_SCREEN); //Clearing screen
}

void LCD_Send_Command(unsigned char cmd){
	LCD_PORT_DIR |= (1<<RS_PIN) | (1<<ENABLE_PIN) | (1<<R_W_PIN); //Setting Enable, R/W and Register Select pins to output
 444:	94 b3       	in	r25, 0x14	; 20
 446:	97 60       	ori	r25, 0x07	; 7
 448:	94 bb       	out	0x14, r25	; 20
	LCD_PORT_OUT &= (~(1<<RS_PIN)) & (~(1<<R_W_PIN));
 44a:	95 b3       	in	r25, 0x15	; 21
 44c:	99 7f       	andi	r25, 0xF9	; 249
 44e:	95 bb       	out	0x15, r25	; 21
	
	#if (LCD_PORT_UPPER_LOWER == UPPER)
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 450:	95 b3       	in	r25, 0x15	; 21
 452:	91 60       	ori	r25, 0x01	; 1
 454:	95 bb       	out	0x15, r25	; 21
	LCD_PORT_OUT = (LCD_PORT_OUT & 0x0F) | (cmd & 0xF0);
 456:	95 b3       	in	r25, 0x15	; 21
 458:	9f 70       	andi	r25, 0x0F	; 15
 45a:	28 2f       	mov	r18, r24
 45c:	20 7f       	andi	r18, 0xF0	; 240
 45e:	92 2b       	or	r25, r18
 460:	95 bb       	out	0x15, r25	; 21
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 462:	95 b3       	in	r25, 0x15	; 21
 464:	9e 7f       	andi	r25, 0xFE	; 254
 466:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	e9 ef       	ldi	r30, 0xF9	; 249
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
 470:	00 c0       	rjmp	.+0      	; 0x472 <__stack+0x13>
 472:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 474:	95 b3       	in	r25, 0x15	; 21
 476:	91 60       	ori	r25, 0x01	; 1
 478:	95 bb       	out	0x15, r25	; 21
	LCD_PORT_OUT = (LCD_PORT_OUT & 0x0F) | (cmd<<4);
 47a:	25 b3       	in	r18, 0x15	; 21
 47c:	f0 e1       	ldi	r31, 0x10	; 16
 47e:	8f 9f       	mul	r24, r31
 480:	c0 01       	movw	r24, r0
 482:	11 24       	eor	r1, r1
 484:	92 2f       	mov	r25, r18
 486:	9f 70       	andi	r25, 0x0F	; 15
 488:	89 2b       	or	r24, r25
 48a:	85 bb       	out	0x15, r24	; 21
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 48c:	85 b3       	in	r24, 0x15	; 21
 48e:	8e 7f       	andi	r24, 0xFE	; 254
 490:	85 bb       	out	0x15, r24	; 21
 492:	08 95       	ret

00000494 <LCD_init>:

#include "LCD.h"

void LCD_init(){
	#if (LCD_PORT_UPPER_LOWER == UPPER)
	LCD_PORT_DIR |= (0xF0); // changing upper 4 pins to output pins
 494:	84 b3       	in	r24, 0x14	; 20
 496:	80 6f       	ori	r24, 0xF0	; 240
 498:	84 bb       	out	0x14, r24	; 20
 49a:	87 e8       	ldi	r24, 0x87	; 135
 49c:	93 e1       	ldi	r25, 0x13	; 19
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <LCD_init+0xa>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <LCD_init+0x10>
 4a4:	00 00       	nop
	#else
	LCD_PORT_DIR |= (0x0F); // changing lower 4 pins to output pins
	#endif
	_delay_ms(20);
	LCD_Send_Command(LCD_4BIT_MODE); // Initialize 4-bit mode
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
	LCD_Send_Command(LCD_4BIT_2LINES_MODE); //Initialize 16x2 mode
 4ac:	88 e2       	ldi	r24, 0x28	; 40
 4ae:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISPLAY_ON_CURSOR_ON);
 4b2:	8e e0       	ldi	r24, 0x0E	; 14
 4b4:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
	LCD_Send_Command(LCD_CLEAR_SCREEN); //Clearing screen
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
 4be:	08 95       	ret

000004c0 <LCD_Display_Character>:
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
	#endif
}

void LCD_Display_Character(unsigned char Char){
	if((Char >=0) && (Char<=9)){
 4c0:	8a 30       	cpi	r24, 0x0A	; 10
 4c2:	08 f4       	brcc	.+2      	; 0x4c6 <LCD_Display_Character+0x6>
		Char = Char + '0';
 4c4:	80 5d       	subi	r24, 0xD0	; 208
	}
	LCD_PORT_DIR |= (1<<RS_PIN) | (1<<ENABLE_PIN) | (1<<R_W_PIN); //Setting Enable, R/W and Register Select pins to output
 4c6:	94 b3       	in	r25, 0x14	; 20
 4c8:	97 60       	ori	r25, 0x07	; 7
 4ca:	94 bb       	out	0x14, r25	; 20
 4cc:	e9 ef       	ldi	r30, 0xF9	; 249
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	31 97       	sbiw	r30, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_Display_Character+0x10>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_Display_Character+0x16>
 4d6:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_OUT &= (~(1<<R_W_PIN));
 4d8:	95 b3       	in	r25, 0x15	; 21
 4da:	9d 7f       	andi	r25, 0xFD	; 253
 4dc:	95 bb       	out	0x15, r25	; 21
	LCD_PORT_OUT |= (1<<RS_PIN);
 4de:	95 b3       	in	r25, 0x15	; 21
 4e0:	94 60       	ori	r25, 0x04	; 4
 4e2:	95 bb       	out	0x15, r25	; 21
	
	#if (LCD_PORT_UPPER_LOWER == UPPER)
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 4e4:	95 b3       	in	r25, 0x15	; 21
 4e6:	91 60       	ori	r25, 0x01	; 1
 4e8:	95 bb       	out	0x15, r25	; 21
	LCD_PORT_OUT = (LCD_PORT_OUT & 0x0F) | (Char & 0xF0);
 4ea:	95 b3       	in	r25, 0x15	; 21
 4ec:	9f 70       	andi	r25, 0x0F	; 15
 4ee:	28 2f       	mov	r18, r24
 4f0:	20 7f       	andi	r18, 0xF0	; 240
 4f2:	92 2b       	or	r25, r18
 4f4:	95 bb       	out	0x15, r25	; 21
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 4f6:	95 b3       	in	r25, 0x15	; 21
 4f8:	9e 7f       	andi	r25, 0xFE	; 254
 4fa:	95 bb       	out	0x15, r25	; 21
 4fc:	e9 ef       	ldi	r30, 0xF9	; 249
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	31 97       	sbiw	r30, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <LCD_Display_Character+0x40>
 504:	00 c0       	rjmp	.+0      	; 0x506 <LCD_Display_Character+0x46>
 506:	00 00       	nop
	_delay_ms(1);
	LCD_PORT_OUT |= (1<<ENABLE_PIN);
 508:	95 b3       	in	r25, 0x15	; 21
 50a:	91 60       	ori	r25, 0x01	; 1
 50c:	95 bb       	out	0x15, r25	; 21
	LCD_PORT_OUT = (LCD_PORT_OUT & 0x0F) | (Char<<4);
 50e:	25 b3       	in	r18, 0x15	; 21
 510:	f0 e1       	ldi	r31, 0x10	; 16
 512:	8f 9f       	mul	r24, r31
 514:	c0 01       	movw	r24, r0
 516:	11 24       	eor	r1, r1
 518:	92 2f       	mov	r25, r18
 51a:	9f 70       	andi	r25, 0x0F	; 15
 51c:	89 2b       	or	r24, r25
 51e:	85 bb       	out	0x15, r24	; 21
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
 520:	85 b3       	in	r24, 0x15	; 21
 522:	8e 7f       	andi	r24, 0xFE	; 254
 524:	85 bb       	out	0x15, r24	; 21
 526:	08 95       	ret

00000528 <LCD_Display_String>:
	LCD_PORT_OUT = (LCD_PORT_OUT & 0xF0) | (Char & 0x0F);
	LCD_PORT_OUT &= (~(1<<ENABLE_PIN));
	#endif
}

void LCD_Display_String(unsigned char *str){
 528:	0f 93       	push	r16
 52a:	1f 93       	push	r17
 52c:	cf 93       	push	r28
 52e:	8c 01       	movw	r16, r24
	signed char i = 0;
 530:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0'){
 532:	03 c0       	rjmp	.+6      	; 0x53a <LCD_Display_String+0x12>
		LCD_Display_Character(str[i]);
 534:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_Display_Character>
		i++;
 538:	cf 5f       	subi	r28, 0xFF	; 255
	#endif
}

void LCD_Display_String(unsigned char *str){
	signed char i = 0;
	while(str[i] != '\0'){
 53a:	f8 01       	movw	r30, r16
 53c:	ec 0f       	add	r30, r28
 53e:	f1 1d       	adc	r31, r1
 540:	c7 fd       	sbrc	r28, 7
 542:	fa 95       	dec	r31
 544:	80 81       	ld	r24, Z
 546:	81 11       	cpse	r24, r1
 548:	f5 cf       	rjmp	.-22     	; 0x534 <LCD_Display_String+0xc>
		LCD_Display_Character(str[i]);
		i++;
	}
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	08 95       	ret

00000552 <Send_enteredKeys>:
	LCD_Display_String("Password:");
	Send_enteredKeys();
	Password_is_set = 1;
}

void Send_enteredKeys(void){
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
	unsigned char key;
	for (unsigned char i = 0; i < 4; i++){
 556:	c0 e0       	ldi	r28, 0x00	; 0
 558:	13 c0       	rjmp	.+38     	; 0x580 <Send_enteredKeys+0x2e>
		key = Keypad_Pressed_Key();
 55a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Keypad_Pressed_Key>
 55e:	d8 2f       	mov	r29, r24
		USART_sendByte_Polling(key);
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <USART_sendByte_Polling>
		LCD_Display_Character(key);
 566:	8d 2f       	mov	r24, r29
 568:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_Display_Character>
 56c:	2f e7       	ldi	r18, 0x7F	; 127
 56e:	88 e3       	ldi	r24, 0x38	; 56
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	21 50       	subi	r18, 0x01	; 1
 574:	80 40       	sbci	r24, 0x00	; 0
 576:	90 40       	sbci	r25, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <Send_enteredKeys+0x20>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <Send_enteredKeys+0x2a>
 57c:	00 00       	nop
	Password_is_set = 1;
}

void Send_enteredKeys(void){
	unsigned char key;
	for (unsigned char i = 0; i < 4; i++){
 57e:	cf 5f       	subi	r28, 0xFF	; 255
 580:	c4 30       	cpi	r28, 0x04	; 4
 582:	58 f3       	brcs	.-42     	; 0x55a <Send_enteredKeys+0x8>
		key = Keypad_Pressed_Key();
		USART_sendByte_Polling(key);
		LCD_Display_Character(key);
		_delay_ms(400);
	}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <Send_enteredPass>:
	}
}

/* Comparing Entered password with System password */
void Send_enteredPass(void){
	LCD_Display_String("Password:");
 58a:	82 eb       	ldi	r24, 0xB2	; 178
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
	LCD_Send_Command(LCD_GOTO_2ND_ROW);
 592:	80 ec       	ldi	r24, 0xC0	; 192
 594:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
	Send_enteredKeys();
 598:	0e 94 a9 02 	call	0x552	; 0x552 <Send_enteredKeys>
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
	unsigned char Password_State = USART_recieveByte_Polling();
 5a2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <USART_recieveByte_Polling>
	switch(Password_State){
 5a6:	99 27       	eor	r25, r25
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 05       	cpc	r25, r1
 5ac:	49 f0       	breq	.+18     	; 0x5c0 <Send_enteredPass+0x36>
 5ae:	18 f0       	brcs	.+6      	; 0x5b6 <Send_enteredPass+0x2c>
 5b0:	02 97       	sbiw	r24, 0x02	; 2
 5b2:	59 f0       	breq	.+22     	; 0x5ca <Send_enteredPass+0x40>
 5b4:	08 95       	ret
		case 0:
		LCD_Display_String("Access Rejected");
 5b6:	82 e7       	ldi	r24, 0x72	; 114
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
		break;
 5be:	08 95       	ret
		case 1:
		LCD_Display_String("Access Granted");
 5c0:	82 e8       	ldi	r24, 0x82	; 130
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
		break;
 5c8:	08 95       	ret
		/* Resetting Password */ 
		case 2:
		LCD_Display_String("Reset Password?");
 5ca:	81 e9       	ldi	r24, 0x91	; 145
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
		LCD_Send_Command(LCD_GOTO_2ND_ROW);
 5d2:	80 ec       	ldi	r24, 0xC0	; 192
 5d4:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
		LCD_Display_String("1:Yes   2:No");
 5d8:	81 ea       	ldi	r24, 0xA1	; 161
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
		unsigned char Answer = Keypad_Pressed_Key();
 5e0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Keypad_Pressed_Key>
 5e4:	2f e7       	ldi	r18, 0x7F	; 127
 5e6:	38 e3       	ldi	r19, 0x38	; 56
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	30 40       	sbci	r19, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <Send_enteredPass+0x60>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <Send_enteredPass+0x6a>
 5f4:	00 00       	nop
		_delay_ms(400);
		switch(Answer){
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	39 f5       	brne	.+78     	; 0x648 <Send_enteredPass+0xbe>
			unsigned char Response;
			case 1:
				LCD_Send_Command(LCD_CLEAR_SCREEN);
 5fa:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
				LCD_Display_String("Old Password:");
 5fe:	8e ea       	ldi	r24, 0xAE	; 174
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
				LCD_Send_Command(LCD_GOTO_2ND_ROW);
 606:	80 ec       	ldi	r24, 0xC0	; 192
 608:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
				Send_enteredKeys();
 60c:	0e 94 a9 02 	call	0x552	; 0x552 <Send_enteredKeys>
				Response = USART_recieveByte_Polling();
 610:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <USART_recieveByte_Polling>
				if(Response){
 614:	88 23       	and	r24, r24
 616:	69 f0       	breq	.+26     	; 0x632 <Send_enteredPass+0xa8>
					LCD_Send_Command(LCD_CLEAR_SCREEN);
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
					LCD_Display_String("New Password:");
 61e:	8c eb       	ldi	r24, 0xBC	; 188
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
					LCD_Send_Command(LCD_GOTO_2ND_ROW);
 626:	80 ec       	ldi	r24, 0xC0	; 192
 628:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
					Send_enteredKeys();
 62c:	0e 94 a9 02 	call	0x552	; 0x552 <Send_enteredKeys>
 630:	08 95       	ret
				}
				else{
					LCD_Send_Command(LCD_CLEAR_SCREEN);
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
					LCD_Display_String("Wrong Password");
 638:	8a ec       	ldi	r24, 0xCA	; 202
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
					LCD_Send_Command(LCD_CLEAR_SCREEN);
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
 646:	08 95       	ret
				}
			break;
			default:
			LCD_Send_Command(LCD_CLEAR_SCREEN);
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
			LCD_Display_String("Ok");
 64e:	89 ed       	ldi	r24, 0xD9	; 217
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
 656:	2f e9       	ldi	r18, 0x9F	; 159
 658:	36 e8       	ldi	r19, 0x86	; 134
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	21 50       	subi	r18, 0x01	; 1
 65e:	30 40       	sbci	r19, 0x00	; 0
 660:	80 40       	sbci	r24, 0x00	; 0
 662:	e1 f7       	brne	.-8      	; 0x65c <Send_enteredPass+0xd2>
 664:	00 c0       	rjmp	.+0      	; 0x666 <Send_enteredPass+0xdc>
 666:	00 00       	nop
 668:	08 95       	ret

0000066a <Send_sysPass>:
		}
	}
}

void Send_sysPass(void){
	LCD_Display_String("Assign New");
 66a:	8c ed       	ldi	r24, 0xDC	; 220
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
	LCD_Send_Command(LCD_GOTO_2ND_ROW);
 672:	80 ec       	ldi	r24, 0xC0	; 192
 674:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
	LCD_Display_String("Password:");
 678:	82 eb       	ldi	r24, 0xB2	; 178
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_String>
	Send_enteredKeys();
 680:	0e 94 a9 02 	call	0x552	; 0x552 <Send_enteredKeys>
	Password_is_set = 1;
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__data_end>
 68a:	08 95       	ret

0000068c <main>:
unsigned char Password_is_set;


int main(void)
{
	USART_init();
 68c:	0e 94 cb 00 	call	0x196	; 0x196 <USART_init>
	LCD_init();
 690:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_init>
	Password_is_set = USART_recieveByte_Polling();
 694:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <USART_recieveByte_Polling>
 698:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__data_end>
    while (1)
	{
		if(Password_is_set){
 69c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__data_end>
 6a0:	88 23       	and	r24, r24
 6a2:	79 f0       	breq	.+30     	; 0x6c2 <main+0x36>
			Send_enteredPass();
 6a4:	0e 94 c5 02 	call	0x58a	; 0x58a <Send_enteredPass>
 6a8:	2f ef       	ldi	r18, 0xFF	; 255
 6aa:	80 e7       	ldi	r24, 0x70	; 112
 6ac:	92 e0       	ldi	r25, 0x02	; 2
 6ae:	21 50       	subi	r18, 0x01	; 1
 6b0:	80 40       	sbci	r24, 0x00	; 0
 6b2:	90 40       	sbci	r25, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <main+0x22>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0x2c>
 6b8:	00 00       	nop
			_delay_ms(800);
			LCD_Send_Command(LCD_CLEAR_SCREEN);
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
 6c0:	ed cf       	rjmp	.-38     	; 0x69c <main+0x10>
		}
		else{
			Send_sysPass();
 6c2:	0e 94 35 03 	call	0x66a	; 0x66a <Send_sysPass>
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	80 e7       	ldi	r24, 0x70	; 112
 6ca:	92 e0       	ldi	r25, 0x02	; 2
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <main+0x40>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <main+0x4a>
 6d6:	00 00       	nop
			_delay_ms(800);
			LCD_Send_Command(LCD_CLEAR_SCREEN);
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	0e 94 22 02 	call	0x444	; 0x444 <LCD_Send_Command>
 6de:	de cf       	rjmp	.-68     	; 0x69c <main+0x10>

000006e0 <__subsf3>:
 6e0:	50 58       	subi	r21, 0x80	; 128

000006e2 <__addsf3>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	aa 27       	eor	r26, r26
 6e6:	0e 94 88 03 	call	0x710	; 0x710 <__addsf3x>
 6ea:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_round>
 6ee:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscA>
 6f2:	38 f0       	brcs	.+14     	; 0x702 <__addsf3+0x20>
 6f4:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscB>
 6f8:	20 f0       	brcs	.+8      	; 0x702 <__addsf3+0x20>
 6fa:	39 f4       	brne	.+14     	; 0x70a <__addsf3+0x28>
 6fc:	9f 3f       	cpi	r25, 0xFF	; 255
 6fe:	19 f4       	brne	.+6      	; 0x706 <__addsf3+0x24>
 700:	26 f4       	brtc	.+8      	; 0x70a <__addsf3+0x28>
 702:	0c 94 c1 04 	jmp	0x982	; 0x982 <__fp_nan>
 706:	0e f4       	brtc	.+2      	; 0x70a <__addsf3+0x28>
 708:	e0 95       	com	r30
 70a:	e7 fb       	bst	r30, 7
 70c:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_inf>

00000710 <__addsf3x>:
 710:	e9 2f       	mov	r30, r25
 712:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_split3>
 716:	58 f3       	brcs	.-42     	; 0x6ee <__addsf3+0xc>
 718:	ba 17       	cp	r27, r26
 71a:	62 07       	cpc	r22, r18
 71c:	73 07       	cpc	r23, r19
 71e:	84 07       	cpc	r24, r20
 720:	95 07       	cpc	r25, r21
 722:	20 f0       	brcs	.+8      	; 0x72c <__addsf3x+0x1c>
 724:	79 f4       	brne	.+30     	; 0x744 <__addsf3x+0x34>
 726:	a6 f5       	brtc	.+104    	; 0x790 <__addsf3x+0x80>
 728:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_zero>
 72c:	0e f4       	brtc	.+2      	; 0x730 <__addsf3x+0x20>
 72e:	e0 95       	com	r30
 730:	0b 2e       	mov	r0, r27
 732:	ba 2f       	mov	r27, r26
 734:	a0 2d       	mov	r26, r0
 736:	0b 01       	movw	r0, r22
 738:	b9 01       	movw	r22, r18
 73a:	90 01       	movw	r18, r0
 73c:	0c 01       	movw	r0, r24
 73e:	ca 01       	movw	r24, r20
 740:	a0 01       	movw	r20, r0
 742:	11 24       	eor	r1, r1
 744:	ff 27       	eor	r31, r31
 746:	59 1b       	sub	r21, r25
 748:	99 f0       	breq	.+38     	; 0x770 <__addsf3x+0x60>
 74a:	59 3f       	cpi	r21, 0xF9	; 249
 74c:	50 f4       	brcc	.+20     	; 0x762 <__addsf3x+0x52>
 74e:	50 3e       	cpi	r21, 0xE0	; 224
 750:	68 f1       	brcs	.+90     	; 0x7ac <__addsf3x+0x9c>
 752:	1a 16       	cp	r1, r26
 754:	f0 40       	sbci	r31, 0x00	; 0
 756:	a2 2f       	mov	r26, r18
 758:	23 2f       	mov	r18, r19
 75a:	34 2f       	mov	r19, r20
 75c:	44 27       	eor	r20, r20
 75e:	58 5f       	subi	r21, 0xF8	; 248
 760:	f3 cf       	rjmp	.-26     	; 0x748 <__addsf3x+0x38>
 762:	46 95       	lsr	r20
 764:	37 95       	ror	r19
 766:	27 95       	ror	r18
 768:	a7 95       	ror	r26
 76a:	f0 40       	sbci	r31, 0x00	; 0
 76c:	53 95       	inc	r21
 76e:	c9 f7       	brne	.-14     	; 0x762 <__addsf3x+0x52>
 770:	7e f4       	brtc	.+30     	; 0x790 <__addsf3x+0x80>
 772:	1f 16       	cp	r1, r31
 774:	ba 0b       	sbc	r27, r26
 776:	62 0b       	sbc	r22, r18
 778:	73 0b       	sbc	r23, r19
 77a:	84 0b       	sbc	r24, r20
 77c:	ba f0       	brmi	.+46     	; 0x7ac <__addsf3x+0x9c>
 77e:	91 50       	subi	r25, 0x01	; 1
 780:	a1 f0       	breq	.+40     	; 0x7aa <__addsf3x+0x9a>
 782:	ff 0f       	add	r31, r31
 784:	bb 1f       	adc	r27, r27
 786:	66 1f       	adc	r22, r22
 788:	77 1f       	adc	r23, r23
 78a:	88 1f       	adc	r24, r24
 78c:	c2 f7       	brpl	.-16     	; 0x77e <__addsf3x+0x6e>
 78e:	0e c0       	rjmp	.+28     	; 0x7ac <__addsf3x+0x9c>
 790:	ba 0f       	add	r27, r26
 792:	62 1f       	adc	r22, r18
 794:	73 1f       	adc	r23, r19
 796:	84 1f       	adc	r24, r20
 798:	48 f4       	brcc	.+18     	; 0x7ac <__addsf3x+0x9c>
 79a:	87 95       	ror	r24
 79c:	77 95       	ror	r23
 79e:	67 95       	ror	r22
 7a0:	b7 95       	ror	r27
 7a2:	f7 95       	ror	r31
 7a4:	9e 3f       	cpi	r25, 0xFE	; 254
 7a6:	08 f0       	brcs	.+2      	; 0x7aa <__addsf3x+0x9a>
 7a8:	b0 cf       	rjmp	.-160    	; 0x70a <__addsf3+0x28>
 7aa:	93 95       	inc	r25
 7ac:	88 0f       	add	r24, r24
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <__addsf3x+0xa2>
 7b0:	99 27       	eor	r25, r25
 7b2:	ee 0f       	add	r30, r30
 7b4:	97 95       	ror	r25
 7b6:	87 95       	ror	r24
 7b8:	08 95       	ret

000007ba <__divsf3>:
 7ba:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divsf3x>
 7be:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_round>
 7c2:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscB>
 7c6:	58 f0       	brcs	.+22     	; 0x7de <__divsf3+0x24>
 7c8:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscA>
 7cc:	40 f0       	brcs	.+16     	; 0x7de <__divsf3+0x24>
 7ce:	29 f4       	brne	.+10     	; 0x7da <__divsf3+0x20>
 7d0:	5f 3f       	cpi	r21, 0xFF	; 255
 7d2:	29 f0       	breq	.+10     	; 0x7de <__divsf3+0x24>
 7d4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_inf>
 7d8:	51 11       	cpse	r21, r1
 7da:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_szero>
 7de:	0c 94 c1 04 	jmp	0x982	; 0x982 <__fp_nan>

000007e2 <__divsf3x>:
 7e2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_split3>
 7e6:	68 f3       	brcs	.-38     	; 0x7c2 <__divsf3+0x8>

000007e8 <__divsf3_pse>:
 7e8:	99 23       	and	r25, r25
 7ea:	b1 f3       	breq	.-20     	; 0x7d8 <__divsf3+0x1e>
 7ec:	55 23       	and	r21, r21
 7ee:	91 f3       	breq	.-28     	; 0x7d4 <__divsf3+0x1a>
 7f0:	95 1b       	sub	r25, r21
 7f2:	55 0b       	sbc	r21, r21
 7f4:	bb 27       	eor	r27, r27
 7f6:	aa 27       	eor	r26, r26
 7f8:	62 17       	cp	r22, r18
 7fa:	73 07       	cpc	r23, r19
 7fc:	84 07       	cpc	r24, r20
 7fe:	38 f0       	brcs	.+14     	; 0x80e <__divsf3_pse+0x26>
 800:	9f 5f       	subi	r25, 0xFF	; 255
 802:	5f 4f       	sbci	r21, 0xFF	; 255
 804:	22 0f       	add	r18, r18
 806:	33 1f       	adc	r19, r19
 808:	44 1f       	adc	r20, r20
 80a:	aa 1f       	adc	r26, r26
 80c:	a9 f3       	breq	.-22     	; 0x7f8 <__divsf3_pse+0x10>
 80e:	35 d0       	rcall	.+106    	; 0x87a <__divsf3_pse+0x92>
 810:	0e 2e       	mov	r0, r30
 812:	3a f0       	brmi	.+14     	; 0x822 <__divsf3_pse+0x3a>
 814:	e0 e8       	ldi	r30, 0x80	; 128
 816:	32 d0       	rcall	.+100    	; 0x87c <__divsf3_pse+0x94>
 818:	91 50       	subi	r25, 0x01	; 1
 81a:	50 40       	sbci	r21, 0x00	; 0
 81c:	e6 95       	lsr	r30
 81e:	00 1c       	adc	r0, r0
 820:	ca f7       	brpl	.-14     	; 0x814 <__divsf3_pse+0x2c>
 822:	2b d0       	rcall	.+86     	; 0x87a <__divsf3_pse+0x92>
 824:	fe 2f       	mov	r31, r30
 826:	29 d0       	rcall	.+82     	; 0x87a <__divsf3_pse+0x92>
 828:	66 0f       	add	r22, r22
 82a:	77 1f       	adc	r23, r23
 82c:	88 1f       	adc	r24, r24
 82e:	bb 1f       	adc	r27, r27
 830:	26 17       	cp	r18, r22
 832:	37 07       	cpc	r19, r23
 834:	48 07       	cpc	r20, r24
 836:	ab 07       	cpc	r26, r27
 838:	b0 e8       	ldi	r27, 0x80	; 128
 83a:	09 f0       	breq	.+2      	; 0x83e <__divsf3_pse+0x56>
 83c:	bb 0b       	sbc	r27, r27
 83e:	80 2d       	mov	r24, r0
 840:	bf 01       	movw	r22, r30
 842:	ff 27       	eor	r31, r31
 844:	93 58       	subi	r25, 0x83	; 131
 846:	5f 4f       	sbci	r21, 0xFF	; 255
 848:	3a f0       	brmi	.+14     	; 0x858 <__divsf3_pse+0x70>
 84a:	9e 3f       	cpi	r25, 0xFE	; 254
 84c:	51 05       	cpc	r21, r1
 84e:	78 f0       	brcs	.+30     	; 0x86e <__divsf3_pse+0x86>
 850:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_inf>
 854:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_szero>
 858:	5f 3f       	cpi	r21, 0xFF	; 255
 85a:	e4 f3       	brlt	.-8      	; 0x854 <__divsf3_pse+0x6c>
 85c:	98 3e       	cpi	r25, 0xE8	; 232
 85e:	d4 f3       	brlt	.-12     	; 0x854 <__divsf3_pse+0x6c>
 860:	86 95       	lsr	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b7 95       	ror	r27
 868:	f7 95       	ror	r31
 86a:	9f 5f       	subi	r25, 0xFF	; 255
 86c:	c9 f7       	brne	.-14     	; 0x860 <__divsf3_pse+0x78>
 86e:	88 0f       	add	r24, r24
 870:	91 1d       	adc	r25, r1
 872:	96 95       	lsr	r25
 874:	87 95       	ror	r24
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret
 87a:	e1 e0       	ldi	r30, 0x01	; 1
 87c:	66 0f       	add	r22, r22
 87e:	77 1f       	adc	r23, r23
 880:	88 1f       	adc	r24, r24
 882:	bb 1f       	adc	r27, r27
 884:	62 17       	cp	r22, r18
 886:	73 07       	cpc	r23, r19
 888:	84 07       	cpc	r24, r20
 88a:	ba 07       	cpc	r27, r26
 88c:	20 f0       	brcs	.+8      	; 0x896 <__divsf3_pse+0xae>
 88e:	62 1b       	sub	r22, r18
 890:	73 0b       	sbc	r23, r19
 892:	84 0b       	sbc	r24, r20
 894:	ba 0b       	sbc	r27, r26
 896:	ee 1f       	adc	r30, r30
 898:	88 f7       	brcc	.-30     	; 0x87c <__divsf3_pse+0x94>
 89a:	e0 95       	com	r30
 89c:	08 95       	ret

0000089e <__fixunssfsi>:
 89e:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_splitA>
 8a2:	88 f0       	brcs	.+34     	; 0x8c6 <__fixunssfsi+0x28>
 8a4:	9f 57       	subi	r25, 0x7F	; 127
 8a6:	98 f0       	brcs	.+38     	; 0x8ce <__fixunssfsi+0x30>
 8a8:	b9 2f       	mov	r27, r25
 8aa:	99 27       	eor	r25, r25
 8ac:	b7 51       	subi	r27, 0x17	; 23
 8ae:	b0 f0       	brcs	.+44     	; 0x8dc <__fixunssfsi+0x3e>
 8b0:	e1 f0       	breq	.+56     	; 0x8ea <__fixunssfsi+0x4c>
 8b2:	66 0f       	add	r22, r22
 8b4:	77 1f       	adc	r23, r23
 8b6:	88 1f       	adc	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	1a f0       	brmi	.+6      	; 0x8c2 <__fixunssfsi+0x24>
 8bc:	ba 95       	dec	r27
 8be:	c9 f7       	brne	.-14     	; 0x8b2 <__fixunssfsi+0x14>
 8c0:	14 c0       	rjmp	.+40     	; 0x8ea <__fixunssfsi+0x4c>
 8c2:	b1 30       	cpi	r27, 0x01	; 1
 8c4:	91 f0       	breq	.+36     	; 0x8ea <__fixunssfsi+0x4c>
 8c6:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fp_zero>
 8ca:	b1 e0       	ldi	r27, 0x01	; 1
 8cc:	08 95       	ret
 8ce:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_zero>
 8d2:	67 2f       	mov	r22, r23
 8d4:	78 2f       	mov	r23, r24
 8d6:	88 27       	eor	r24, r24
 8d8:	b8 5f       	subi	r27, 0xF8	; 248
 8da:	39 f0       	breq	.+14     	; 0x8ea <__fixunssfsi+0x4c>
 8dc:	b9 3f       	cpi	r27, 0xF9	; 249
 8de:	cc f3       	brlt	.-14     	; 0x8d2 <__fixunssfsi+0x34>
 8e0:	86 95       	lsr	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b3 95       	inc	r27
 8e8:	d9 f7       	brne	.-10     	; 0x8e0 <__fixunssfsi+0x42>
 8ea:	3e f4       	brtc	.+14     	; 0x8fa <__fixunssfsi+0x5c>
 8ec:	90 95       	com	r25
 8ee:	80 95       	com	r24
 8f0:	70 95       	com	r23
 8f2:	61 95       	neg	r22
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	8f 4f       	sbci	r24, 0xFF	; 255
 8f8:	9f 4f       	sbci	r25, 0xFF	; 255
 8fa:	08 95       	ret

000008fc <__floatunsisf>:
 8fc:	e8 94       	clt
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <__floatsisf+0x12>

00000900 <__floatsisf>:
 900:	97 fb       	bst	r25, 7
 902:	3e f4       	brtc	.+14     	; 0x912 <__floatsisf+0x12>
 904:	90 95       	com	r25
 906:	80 95       	com	r24
 908:	70 95       	com	r23
 90a:	61 95       	neg	r22
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	99 23       	and	r25, r25
 914:	a9 f0       	breq	.+42     	; 0x940 <__floatsisf+0x40>
 916:	f9 2f       	mov	r31, r25
 918:	96 e9       	ldi	r25, 0x96	; 150
 91a:	bb 27       	eor	r27, r27
 91c:	93 95       	inc	r25
 91e:	f6 95       	lsr	r31
 920:	87 95       	ror	r24
 922:	77 95       	ror	r23
 924:	67 95       	ror	r22
 926:	b7 95       	ror	r27
 928:	f1 11       	cpse	r31, r1
 92a:	f8 cf       	rjmp	.-16     	; 0x91c <__floatsisf+0x1c>
 92c:	fa f4       	brpl	.+62     	; 0x96c <__floatsisf+0x6c>
 92e:	bb 0f       	add	r27, r27
 930:	11 f4       	brne	.+4      	; 0x936 <__floatsisf+0x36>
 932:	60 ff       	sbrs	r22, 0
 934:	1b c0       	rjmp	.+54     	; 0x96c <__floatsisf+0x6c>
 936:	6f 5f       	subi	r22, 0xFF	; 255
 938:	7f 4f       	sbci	r23, 0xFF	; 255
 93a:	8f 4f       	sbci	r24, 0xFF	; 255
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	16 c0       	rjmp	.+44     	; 0x96c <__floatsisf+0x6c>
 940:	88 23       	and	r24, r24
 942:	11 f0       	breq	.+4      	; 0x948 <__floatsisf+0x48>
 944:	96 e9       	ldi	r25, 0x96	; 150
 946:	11 c0       	rjmp	.+34     	; 0x96a <__floatsisf+0x6a>
 948:	77 23       	and	r23, r23
 94a:	21 f0       	breq	.+8      	; 0x954 <__floatsisf+0x54>
 94c:	9e e8       	ldi	r25, 0x8E	; 142
 94e:	87 2f       	mov	r24, r23
 950:	76 2f       	mov	r23, r22
 952:	05 c0       	rjmp	.+10     	; 0x95e <__floatsisf+0x5e>
 954:	66 23       	and	r22, r22
 956:	71 f0       	breq	.+28     	; 0x974 <__floatsisf+0x74>
 958:	96 e8       	ldi	r25, 0x86	; 134
 95a:	86 2f       	mov	r24, r22
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	2a f0       	brmi	.+10     	; 0x96c <__floatsisf+0x6c>
 962:	9a 95       	dec	r25
 964:	66 0f       	add	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	88 1f       	adc	r24, r24
 96a:	da f7       	brpl	.-10     	; 0x962 <__floatsisf+0x62>
 96c:	88 0f       	add	r24, r24
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	97 f9       	bld	r25, 7
 974:	08 95       	ret

00000976 <__fp_inf>:
 976:	97 f9       	bld	r25, 7
 978:	9f 67       	ori	r25, 0x7F	; 127
 97a:	80 e8       	ldi	r24, 0x80	; 128
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	08 95       	ret

00000982 <__fp_nan>:
 982:	9f ef       	ldi	r25, 0xFF	; 255
 984:	80 ec       	ldi	r24, 0xC0	; 192
 986:	08 95       	ret

00000988 <__fp_pscA>:
 988:	00 24       	eor	r0, r0
 98a:	0a 94       	dec	r0
 98c:	16 16       	cp	r1, r22
 98e:	17 06       	cpc	r1, r23
 990:	18 06       	cpc	r1, r24
 992:	09 06       	cpc	r0, r25
 994:	08 95       	ret

00000996 <__fp_pscB>:
 996:	00 24       	eor	r0, r0
 998:	0a 94       	dec	r0
 99a:	12 16       	cp	r1, r18
 99c:	13 06       	cpc	r1, r19
 99e:	14 06       	cpc	r1, r20
 9a0:	05 06       	cpc	r0, r21
 9a2:	08 95       	ret

000009a4 <__fp_round>:
 9a4:	09 2e       	mov	r0, r25
 9a6:	03 94       	inc	r0
 9a8:	00 0c       	add	r0, r0
 9aa:	11 f4       	brne	.+4      	; 0x9b0 <__fp_round+0xc>
 9ac:	88 23       	and	r24, r24
 9ae:	52 f0       	brmi	.+20     	; 0x9c4 <__fp_round+0x20>
 9b0:	bb 0f       	add	r27, r27
 9b2:	40 f4       	brcc	.+16     	; 0x9c4 <__fp_round+0x20>
 9b4:	bf 2b       	or	r27, r31
 9b6:	11 f4       	brne	.+4      	; 0x9bc <__fp_round+0x18>
 9b8:	60 ff       	sbrs	r22, 0
 9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <__fp_round+0x20>
 9bc:	6f 5f       	subi	r22, 0xFF	; 255
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	08 95       	ret

000009c6 <__fp_split3>:
 9c6:	57 fd       	sbrc	r21, 7
 9c8:	90 58       	subi	r25, 0x80	; 128
 9ca:	44 0f       	add	r20, r20
 9cc:	55 1f       	adc	r21, r21
 9ce:	59 f0       	breq	.+22     	; 0x9e6 <__fp_splitA+0x10>
 9d0:	5f 3f       	cpi	r21, 0xFF	; 255
 9d2:	71 f0       	breq	.+28     	; 0x9f0 <__fp_splitA+0x1a>
 9d4:	47 95       	ror	r20

000009d6 <__fp_splitA>:
 9d6:	88 0f       	add	r24, r24
 9d8:	97 fb       	bst	r25, 7
 9da:	99 1f       	adc	r25, r25
 9dc:	61 f0       	breq	.+24     	; 0x9f6 <__fp_splitA+0x20>
 9de:	9f 3f       	cpi	r25, 0xFF	; 255
 9e0:	79 f0       	breq	.+30     	; 0xa00 <__fp_splitA+0x2a>
 9e2:	87 95       	ror	r24
 9e4:	08 95       	ret
 9e6:	12 16       	cp	r1, r18
 9e8:	13 06       	cpc	r1, r19
 9ea:	14 06       	cpc	r1, r20
 9ec:	55 1f       	adc	r21, r21
 9ee:	f2 cf       	rjmp	.-28     	; 0x9d4 <__fp_split3+0xe>
 9f0:	46 95       	lsr	r20
 9f2:	f1 df       	rcall	.-30     	; 0x9d6 <__fp_splitA>
 9f4:	08 c0       	rjmp	.+16     	; 0xa06 <__fp_splitA+0x30>
 9f6:	16 16       	cp	r1, r22
 9f8:	17 06       	cpc	r1, r23
 9fa:	18 06       	cpc	r1, r24
 9fc:	99 1f       	adc	r25, r25
 9fe:	f1 cf       	rjmp	.-30     	; 0x9e2 <__fp_splitA+0xc>
 a00:	86 95       	lsr	r24
 a02:	71 05       	cpc	r23, r1
 a04:	61 05       	cpc	r22, r1
 a06:	08 94       	sec
 a08:	08 95       	ret

00000a0a <__fp_zero>:
 a0a:	e8 94       	clt

00000a0c <__fp_szero>:
 a0c:	bb 27       	eor	r27, r27
 a0e:	66 27       	eor	r22, r22
 a10:	77 27       	eor	r23, r23
 a12:	cb 01       	movw	r24, r22
 a14:	97 f9       	bld	r25, 7
 a16:	08 95       	ret

00000a18 <__mulsf3>:
 a18:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__mulsf3x>
 a1c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_round>
 a20:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_pscA>
 a24:	38 f0       	brcs	.+14     	; 0xa34 <__mulsf3+0x1c>
 a26:	0e 94 cb 04 	call	0x996	; 0x996 <__fp_pscB>
 a2a:	20 f0       	brcs	.+8      	; 0xa34 <__mulsf3+0x1c>
 a2c:	95 23       	and	r25, r21
 a2e:	11 f0       	breq	.+4      	; 0xa34 <__mulsf3+0x1c>
 a30:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_inf>
 a34:	0c 94 c1 04 	jmp	0x982	; 0x982 <__fp_nan>
 a38:	11 24       	eor	r1, r1
 a3a:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_szero>

00000a3e <__mulsf3x>:
 a3e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fp_split3>
 a42:	70 f3       	brcs	.-36     	; 0xa20 <__mulsf3+0x8>

00000a44 <__mulsf3_pse>:
 a44:	95 9f       	mul	r25, r21
 a46:	c1 f3       	breq	.-16     	; 0xa38 <__mulsf3+0x20>
 a48:	95 0f       	add	r25, r21
 a4a:	50 e0       	ldi	r21, 0x00	; 0
 a4c:	55 1f       	adc	r21, r21
 a4e:	62 9f       	mul	r22, r18
 a50:	f0 01       	movw	r30, r0
 a52:	72 9f       	mul	r23, r18
 a54:	bb 27       	eor	r27, r27
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	63 9f       	mul	r22, r19
 a5c:	aa 27       	eor	r26, r26
 a5e:	f0 0d       	add	r31, r0
 a60:	b1 1d       	adc	r27, r1
 a62:	aa 1f       	adc	r26, r26
 a64:	64 9f       	mul	r22, r20
 a66:	66 27       	eor	r22, r22
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	66 1f       	adc	r22, r22
 a6e:	82 9f       	mul	r24, r18
 a70:	22 27       	eor	r18, r18
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	73 9f       	mul	r23, r19
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	62 1f       	adc	r22, r18
 a80:	83 9f       	mul	r24, r19
 a82:	a0 0d       	add	r26, r0
 a84:	61 1d       	adc	r22, r1
 a86:	22 1f       	adc	r18, r18
 a88:	74 9f       	mul	r23, r20
 a8a:	33 27       	eor	r19, r19
 a8c:	a0 0d       	add	r26, r0
 a8e:	61 1d       	adc	r22, r1
 a90:	23 1f       	adc	r18, r19
 a92:	84 9f       	mul	r24, r20
 a94:	60 0d       	add	r22, r0
 a96:	21 1d       	adc	r18, r1
 a98:	82 2f       	mov	r24, r18
 a9a:	76 2f       	mov	r23, r22
 a9c:	6a 2f       	mov	r22, r26
 a9e:	11 24       	eor	r1, r1
 aa0:	9f 57       	subi	r25, 0x7F	; 127
 aa2:	50 40       	sbci	r21, 0x00	; 0
 aa4:	9a f0       	brmi	.+38     	; 0xacc <__mulsf3_pse+0x88>
 aa6:	f1 f0       	breq	.+60     	; 0xae4 <__mulsf3_pse+0xa0>
 aa8:	88 23       	and	r24, r24
 aaa:	4a f0       	brmi	.+18     	; 0xabe <__mulsf3_pse+0x7a>
 aac:	ee 0f       	add	r30, r30
 aae:	ff 1f       	adc	r31, r31
 ab0:	bb 1f       	adc	r27, r27
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	91 50       	subi	r25, 0x01	; 1
 aba:	50 40       	sbci	r21, 0x00	; 0
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <__mulsf3_pse+0x64>
 abe:	9e 3f       	cpi	r25, 0xFE	; 254
 ac0:	51 05       	cpc	r21, r1
 ac2:	80 f0       	brcs	.+32     	; 0xae4 <__mulsf3_pse+0xa0>
 ac4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__fp_inf>
 ac8:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_szero>
 acc:	5f 3f       	cpi	r21, 0xFF	; 255
 ace:	e4 f3       	brlt	.-8      	; 0xac8 <__mulsf3_pse+0x84>
 ad0:	98 3e       	cpi	r25, 0xE8	; 232
 ad2:	d4 f3       	brlt	.-12     	; 0xac8 <__mulsf3_pse+0x84>
 ad4:	86 95       	lsr	r24
 ad6:	77 95       	ror	r23
 ad8:	67 95       	ror	r22
 ada:	b7 95       	ror	r27
 adc:	f7 95       	ror	r31
 ade:	e7 95       	ror	r30
 ae0:	9f 5f       	subi	r25, 0xFF	; 255
 ae2:	c1 f7       	brne	.-16     	; 0xad4 <__mulsf3_pse+0x90>
 ae4:	fe 2b       	or	r31, r30
 ae6:	88 0f       	add	r24, r24
 ae8:	91 1d       	adc	r25, r1
 aea:	96 95       	lsr	r25
 aec:	87 95       	ror	r24
 aee:	97 f9       	bld	r25, 7
 af0:	08 95       	ret

00000af2 <__tablejump2__>:
 af2:	ee 0f       	add	r30, r30
 af4:	ff 1f       	adc	r31, r31
 af6:	05 90       	lpm	r0, Z+
 af8:	f4 91       	lpm	r31, Z
 afa:	e0 2d       	mov	r30, r0
 afc:	09 94       	ijmp

00000afe <_exit>:
 afe:	f8 94       	cli

00000b00 <__stop_program>:
 b00:	ff cf       	rjmp	.-2      	; 0xb00 <__stop_program>
